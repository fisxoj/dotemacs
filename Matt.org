#+TITLE: Matt's Emacs configuration

* General

** Changing cases
#+BEGIN_SRC emacs-lisp
  (use-package string-inflection
    :bind (("C-c I" . string-inflection-cycle)))
#+END_SRC

#+begin_src emacs-lisp
  ;; Source: https://news.ycombinator.com/item?id=22131815
  (defun to-quoted-array (start end quote)
    "Turn strings on newlines into a QUOTEd, comma-separated one-liner."
    (interactive "r\nMQuote: ")
    (let ((insertion
           (mapconcat
            (lambda (x) (format "%s%s%s" quote x quote))
            (split-string (buffer-substring start end)) ", ")))
      (delete-region start end)
      (insert insertion)))
#+end_src

** Window navigation
#+begin_src emacs-lisp
  (use-package ace-window
    :bind
    ("M-o" . ace-window)
    :custom
    (aw-keys '(?a ?r ?s ?t ?d ?h ?n ?e ?i ?o)))
#+end_src
** Diminish
 #+BEGIN_SRC emacs-lisp
 (use-package diminish :ensure t)
 #+END_SRC
** Unicode
https://thraxys.wordpress.com/2016/01/13/utf-8-in-emacs-everywhere-forever/
#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(when (display-graphic-p)
   (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC

** Packages

#+begin_src emacs-lisp
  (setf use-package-always-ensure t)
#+end_src

** Numerous tweaks to default emacs settings
Many of these things are borrowed from [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's configuration]].
#+begin_src emacs-lisp
  ;; No splash screen!  Why did it take you so long to add this?
  (setq inhibit-startup-message t
	inhibit-startup-screen t)

  ;; No toolbar
  (tool-bar-mode -1)

  ;; Never tabs by default
  (setq-default indent-tabs-mode nil)

  ;; Match parens
  (show-paren-mode 1)

  ;; No bells or flashes, please
  (setq ring-bell-function 'ignore)

  ;; Visual line mode by default
  (global-visual-line-mode 1)

  (defalias 'yes-or-no-p 'y-or-n-p)
  (global-auto-revert-mode 1)
  (setf truncate-lines nil)

  ;; No blinking
  (blink-cursor-mode -1)

  ;; Don't bg emacs on C-z
  (global-set-key (kbd "C-z")
		  (lambda ()
		    (interactive)
		    (message "Not sending emacs to background, you fat-fingered dummy!")))

  (setf confirm-kill-emacs 'y-or-n-p)
#+end_src

Allow narrowing buffers, I know how to use it
#+begin_src emacs-lisp
(put 'narrow-to-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
#+end_src

Replace the default scratch message with something more fun
#+BEGIN_SRC emacs-lisp
  (use-package adafruit-wisdom
    :custom
    (inhibit-startup-message t)
    (initial-scratch-message (concat ";; " (adafruit-wisdom-select) "\n")))
#+END_SRC
** Backup

#+begin_src emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+end_src
** Theme
#+begin_src emacs-lisp
  (defcustom fisxoj/day-theme 'base16-atelier-sulphurpool-light
    "My current preferred day theme.")

  (defcustom fisxoj/night-theme 'base16-tomorrow-night-eighties
    "My current preferred night theme.")

  (use-package base16-theme
    :config
    (defun fisxoj/day-theme ()
      (interactive)
      (load-theme fisxoj/day-theme t))

    (defun fisxoj/night-theme ()
      (interactive)
      (load-theme fisxoj/night-theme t))
    (fisxoj/night-theme))
#+end_src
** Font
#+begin_src emacs-lisp
  ;; https://www.masteringemacs.org/article/unicode-ligatures-color-emoji
  ;; This stops color emoji from rendering in the modeline, for me.
  (use-package unicode-fonts
    :ensure t
    :config
    (unicode-fonts-setup))
#+end_src
;; http://sourcefoundry.org/hack/
#+BEGIN_SRC emacs-lisp
(when (eq system-type 'gnu/linux)
  (set-frame-font "Fira Code-14"))
#+END_SRC
** Input
Duplicate a line
#+begin_src emacs-lisp
(defun fisxoj/duplicate-line ()
  (interactive)
  (move-beginning-of-line 1)
  (kill-line)
  (yank)
  (open-line 1)
  (next-line 1)
  (yank))

(global-set-key (kbd "C-c C-d") 'fisxoj/duplicate-line)
#+end_src

If I'm typing another alphabet, it's probably japanese
#+begin_src emacs-lisp
  (setq default-input-method "japanese")
#+end_src
** Saving
Delete trailing whitespace
#+begin_src emacs-lisp
  ;; http://ergoemacs.org/emacs/elisp_compact_empty_lines.htmlrevi
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src
** Window Decorations
#+begin_src emacs-lisp
(when window-system
  (tooltip-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1))
#+end_src
** Centering Text for Reading
http://alexkehayias.tumblr.com/post/98888273308/simple-centered-text-mode-in-emacs
#+BEGIN_SRC emacs-lisp
  (defun center-text ()
    "Center the text in the middle of the buffer. Works best in full screen"
    (interactive)
    (set-window-margins (car (get-buffer-window-list (current-buffer) nil t))
                          (/ (window-width) 4)
                          (/ (window-width) 4)))

  (defun center-text-clear ()
    (interactive)
    (set-window-margins (car (get-buffer-window-list (current-buffer) nil t))
                          nil
                          nil))

  (setq centered nil)

  (defun center-text-mode ()
    (interactive)
    (if centered
      (progn (center-text-clear)
             (setq centered nil))
      (progn (center-text)
             (setq centered t))))

  (global-set-key (kbd "C-c M-t") 'center-text-mode)
#+END_SRC
** Mail
#+begin_src emacs-lisp
  (setq smtpmail-smtp-server "smtp.gmail.com"
        smtpmail-smtp-service 587
        send-mail-function (quote smtpmail-send-it))
#+end_src
** Eshell
#+BEGIN_SRC emacs-lisp
  (use-package eshell-git-prompt
    :init
    (eshell-git-prompt-use-theme 'powerline))
#+END_SRC
** Ligatures
   #+begin_src emacs-lisp
     (use-package ligature
       :config
       ;; Enable the "www" ligature in every possible major mode
       (ligature-set-ligatures 't '("www"))
       ;; Enable traditional ligature support in eww-mode, if the
       ;; `variable-pitch' face supports it
       (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
       ;; Enable all Cascadia Code ligatures in programming modes
       (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                            ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                            "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                            "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                            "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                            "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                            "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                            "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                            ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                            "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                            "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                            "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                            "\\\\" "://"))
       ;; Enables ligature checks globally in all buffers. You can also do it
       ;; per mode with `ligature-mode'.
       (global-ligature-mode t))
   #+end_src
** Snippets
   #+begin_src emacs-lisp
     (use-package yasnippet
       :init
       (yas-global-mode))
   #+end_src
* I/O
** Elfeed
#+begin_src emacs-lisp
  (use-package elfeed
    :custom
    (elfeed-feeds
        '(;; "http://planet.gnome.org/rss20.xml"
          ("http://mjg59.dreamwidth.org/data/rss" linux) ;; Matthew Garrett
          ("http://sage.thesharps.us/feed/" linux) ;; Sage Sharp
          ("http://planet.lisp.org/rss20.xml" code lisp)
          ("http://sachachua.com/blog/feed" emacs inspiration) ;; Sacha Chua
          ("http://nullprogram.com/feed/" emacs) ;; Chris Wellons
          ("http://readthiseatthat.blogspot.com/feeds/posts/default?alt=rss" books)
          ("http://slime-tips.tumblr.com/rss" emacs lisp)
          ("http://emacshorrors.com/feed" emacs)
          ("http://www.antipope.org/charlie/blog-static/atom.xml" books) ;; Charles Stross
          ;; "https://letsencrypt.org/feed.xml"
          ("http://blog.8arrow.org/rss" lisp) ;; Eitaro Fukamachi
          ("http://eudoxia.me/feed.xml" lisp) ;; Fernando Boretti
          ("https://drmeister.wordpress.com/feed/" lisp) ;; Christian Schafmeister
          ("http://www.pvk.ca/atom.xml" lisp) ;; Paul Kuhong (sbcl)
          ("https://mollermara.com/rss.xml" emacs)
          ("http://www.suspectsemantics.com/atom.xml" rust)
          ("http://birdlord.tumblr.com/" comics books culture) ;; Emily Horne
          ("https://www.harihareswara.net/nb/nb.cgi/syndicate/sumana" linux) ;; Sumana Harihareswara
          ("https://jvns.ca/atom.xml" ruby rust) ;; Julia Evans
          ("http://jensimmons.com/blog.xml" web design) ;; Jen Simmons (Mozilla)
          ("http://zerolib.com/feed.xml" lisp emacs) ;; John Jacobsen
          ("http://irreal.org/blog/?feed=rss2" emacs) ;; Irreal
          ))

    :bind (("C-x w" . elfeed)))
#+end_src

Taken from [[https://github.com/skeeto/elfeed/issues/34#issuecomment-158824561][here]].
#+BEGIN_SRC emacs-lisp
(defun my-elfeed-store-link ()
  "Store a link to an elfeed search or entry buffer."
  (cond ((derived-mode-p 'elfeed-search-mode)
         (org-store-link-props
          :type "elfeed"
          :link (format "elfeed:%s" elfeed-search-filter)
          :description elfeed-search-filter))
        ((derived-mode-p 'elfeed-show-mode)
         (org-store-link-props
          :type "elfeed"
          :link (format "elfeed:%s#%s"
                        (car (elfeed-entry-id elfeed-show-entry))
                        (cdr (elfeed-entry-id elfeed-show-entry)))
          :description (elfeed-entry-title elfeed-show-entry)))))

(defun my-elfeed-open (filter-or-id)
  "Jump to an elfeed entry or search, depending on what FILTER-OR-ID looks like."
  (message "filter-or-id: %s" filter-or-id)
  (if (string-match "\\([^#]+\\)#\\(.+\\)" filter-or-id)
      (elfeed-show-entry (elfeed-db-get-entry (cons (match-string 1 filter-or-id)
                                                    (match-string 2 filter-or-id))))
    (switch-to-buffer (elfeed-search-buffer))
    (unless (eq major-mode 'elfeed-search-mode)
      (elfeed-search-mode))
    (elfeed-search-set-filter filter-or-id)))

(org-add-link-type "elfeed" #'my-elfeed-open)
(add-hook 'org-store-link-functions #'my-elfeed-store-link)
#+END_SRC

** Notmuch
#+begin_src emacs-lisp
  (use-package notmuch
    :defer t
    :config (require 'org-notmuch))
#+end_src
* Meta-Modes
Projects, SVC, etc

** Ivy
https://www.reddit.com/r/emacs/comments/910pga/tip_how_to_use_ivy_and_its_utilities_in_your/
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :bind (("C-c C-r" . ivy-resume)
           ("C-x b" . ivy-switch-buffer)
           ("C-x B" . ivy-switch-buffer-other-window))
    :custom
    (ivy-count-format "(%d/%d) ")
    (ivy-display-style 'fancy)
    (ivy-use-virtual-buffers t)
    (ivy-initial-inputs-alist nil)
    :config
    (ivy-mode))

  (use-package ivy-rich
    :after ivy
    :custom
    (ivy-virtual-abbreviate 'full
                            ivy-rich-switch-buffer-align-virtual-buffer t
                            ivy-rich-switch-buffer-transformer 'abbrev)
    :config
    (ivy-rich-mode))
#+END_SRC
** Counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :after ivy
    :bind (("C-x C-f" . counsel-find-file)
           ("M-x" . counsel-M-x)
           ("M-y" . counsel-yank-pop)))
#+END_SRC
** Magit
#+begin_src emacs-lisp
  (use-package magit
    :defer t
    :bind (("C-x g" . magit-status)
           :map magit-mode-map
           ("H f" . github-browse-file)
           ("H b" . github-browse-file-blame)
           ("v" . endless/visit-pull-request-url))
    :config
    (use-package github-browse-file)
    (defun endless/visit-pull-request-url ()
      "Visit the current branch's PR on Github."
      (interactive)
      (browse-url
       (format "https://github.com/%s/pull/new/%s"
               (replace-regexp-in-string
                "\\`.+github\\.com:\\(.+\\)\\.git\\'" "\\1"
                (magit-get "remote"
                           (magit-get-push-remote)
                           "url"))
               (magit-get-current-branch))))
    (setq magit-completing-read-function 'ivy-completing-read)

    ;; Process ansi escape sequences so they don't clutter the output
    ;; from a hidden comment here: https://github.com/magit/magit/issues/1878
    (defun color-buffer (proc &rest args)
      (interactive)
      (with-current-buffer (process-buffer proc)
        (read-only-mode -1)
        (ansi-color-apply-on-region (point-min) (point-max))
        (read-only-mode 1)))

    (advice-add 'magit-process-filter :after #'color-buffer))
#+end_src

Open pull request URLs in the browser
#+BEGIN_SRC emacs-lisp
  (defun magit-visit-pull-request-url ()
    "Visit the current branch's PR on GitHub."
    (interactive)
    (let ((remote-branch (magit-get-remote-branch)))
      (cond
       ((null remote-branch)
        (message "No remote branch"))
       (t
        (browse-url
         (format "https://github.com/%s/pull/new/%s"
                 (replace-regexp-in-string
                  ".+github\\.com:\\(.+\\)\\(\\.git\\)?" "\\1" ;"[.@]+github\\.com:\\(.+\\)\\.git" "\\1"
                  (magit-get "remote"
                             (magit-get-remote)
                             "url"))
                 (cdr remote-branch)))))))

  (eval-after-load 'magit
    '(define-key magit-mode-map "v"
       #'magit-visit-pull-request-url))
#+END_SRC
** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :bind (("C-c p" . projectile-command-map)
           :map projectile-command-map
           (("s s" . counsel-projectile-rg)))
    :init
    (projectile-mode)

    :config
    (defun projectile-cl-project-p ()
      "Identifies a project as being common lisp by the presence of files with .cl or .lisp extensions"
      (-any? (lambda (file)
               (let ((extension (file-name-extension file)))
                 (or (string= extension "lisp")
                     (string= extension "cl"))))
             (projectile-current-project-files)))

    ;; Turns out this needs to return a function for projectile to
    ;; not try to cache the result as a string.  Kept getting errors like
    ;; compilation-start: Wrong type argument: stringp, :sly-eval-async
    (defun projectile-cl-test-function ()
      (lambda ()
        "Calls into slime to run the current project's tests with asdf."
        (cl-multiple-value-bind (repl-name async-eval-function)
            (cond
             ((require 'sly nil t) (list "sly" #'sly-eval-async))
             ((require 'slime nil t) (list "slime" #'slime-eval-async))
             (t (error "Neither sly nor slime seems to be installed.")))
          (message "Testing %s in %s..." (projectile-project-name) repl-name)
          (funcall
           async-eval-function
           `(asdf:test-system ,(projectile-project-name))
           (lambda (result) (message "Tests finished with result %s" result))
           "CL-USER"))))

    (defun fisxoj/projectile-cl-related-files (path)
      "Function to teach projectile how to find my lisp implementation and tests from each other.

  Based on https://github.com/bbatsov/projectile/blob/master/doc/projects.md#example---same-source-file-name-for-test-and-impl"
      (cond
       ((string-equal "src/" (cl-subseq path 0 4))
        (list :test (concat "t/" (cl-subseq path 4))))
       ((string-equal "t/" (cl-subseq path 0 2))
        (list :impl (concat "src/" (cl-subseq path 2))))))


    (projectile-register-project-type 'common-lisp
                                      'projectile-cl-project-p
                                      :related-files-fn 'fisxoj/projectile-cl-related-files
                                      :test-dir "t/"
                                      :test-prefix "" ;; Need something here or projectile fails to make new test files
                                      :test 'projectile-cl-test-function)

    :custom
    (projectile-create-missing-test-files t)
    (projectile-enable-caching nil)
    (projectile-completion-system 'ivy)
    (projectile-switch-project-action 'projectile-vc)
    (projectile-globally-ignored-file-suffixes '(".lock")))

  (use-package projectile-ripgrep
    :after projectile
    :bind (:map projectile-command-map
                (("s R" . fisxoj/projectile-ripgrep-current-word)))
    :init
    (defun fisxoj/projectile-ripgrep-current-word ()
      "Search a whole project for the word at point.  A poor imitation of xref-references."
      (interactive)
      (projectile-ripgrep (current-word))))

  (use-package counsel-projectile
    :after projectile)
#+end_src
** Multiple Cursors
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :defer t
    :bind (("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           ("C-c C->" . mc/mark-all-like-this-dwim)
           ("C-:" . mc/mark-next-lines)))
#+end_src

** Swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :after ivy
    :bind (("C-s" . swiper)
           ("C-r" . swiper)))

#+END_SRC
** Dim
#+BEGIN_SRC emacs-lisp
  (use-package dim
    :init
    (dim-major-names
     '((emacs-lisp-mode    "EL")
       (lisp-mode          "CL")
       (Info-mode          "I")
       (help-mode          "H")
       (typescript-mode    "TS")
       (js2-mode           "JS2")
       (python-mode        "PY")
       (org-mode           "ORG")
       (go-mode            "GO")))
    (dim-minor-names
     '((auto-fill-function "↵")
       (isearch-mode       "🔎")
       (editorconfig-mode  "🐭")
       (whitespace-mode    "_" whitespace)
       (paredit-mode       "()"paredit)
       (eldoc-mode         ""   eldoc)
       (ivy-mode           "")
       (projectile-mode    "")
       (flyspell-mode      "🐦")
       (flycheck-mode      "🐦")
       (prettier-mode      "✨")
       (org-indent-mode    "")
       (magit-mode         "❇")
       (writegood-mode     "✎")
       (tide-mode          "🌊")
       (visual-line-mode   "⤸")
       (yas-minor-mode     "✁")
       (company-mode       "🏢")
       (editorconfig-mode  ""))))
#+END_SRC
** Writegood
#+BEGIN_SRC emacs-lisp
(use-package writegood-mode)
#+END_SRC
** Jira
#+BEGIN_SRC emacs-lisp
  (use-package org-jira
    :custom
    (org-jira-working-dir "~/Documents/org-jira")
    (jiralib-url "https://codecademy.atlassian.net/")
    (org-jira-done-states '("Fertig" "Done" "Closed" "Resolved")))
#+END_SRC
** Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :config
    (sp-use-paredit-bindings))
#+END_SRC
** Rainbow
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode)
#+END_SRC
** Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay 0.1)
    (company-minimum-prefix-length 2)
    (company-tooltip-align-annotations t))

  (use-package company-box
    :if (>= emacs-major-version 26)
    :after company-mode
    :hook company-mode
    :custom
    (company-box-doc-delay 0.2))
#+END_SRC
** Paredit
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :hook ((lisp-mode . paredit-mode)
           (emacs-lisp-mode . paredit-mode)
           (sly-mrepl-mode . paredit-mode)))
#+END_SRC
** Editorconfig
   #+BEGIN_SRC emacs-lisp
     (use-package editorconfig
       :config
       (editorconfig-mode 1))
   #+END_SRC
** Flycheck
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :custom
       (flycheck-check-syntax-automatically '(save mode-enabled)))
   #+END_SRC
** Eglot
   #+begin_src emacs-lisp
     (use-package eglot
       :custom
       (eglot-autoreconnect nil))
   #+end_src
* Language Modes
** Org
#+begin_src emacs-lisp
  (setq org-directory "~/Documents/Notes/"
        org-journal-dir "~/Documents/Notes/")
#+end_src
*** Presentation
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (writegood-mode)
              (flyspell-mode)))
  (setq ;; org-ellipsis "⤵"
        org-startup-with-inline-images t)
#+end_src
*** Babel
#+begin_src emacs-lisp
  (use-package ob-http
    :after org-mode)

  (use-package ob-restclient
    :after org-mode)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((gnuplot  . t)
     (lisp     . t)
     (maxima   . t)
     (dot      . t)
     (python   . t)
     (clojure  . t)
     (shell    . t)
     (http     . t)
     (plantuml . t)
     (restclient . t)))

  (setq org-confirm-babel-evaluate nil
        org-src-tab-acts-natively t)
#+end_src
*** Capture
#+begin_src emacs-lisp
  (define-key global-map "\C-cc" 'org-capture)
  (setq org-capture-templates
        '(("t" "Todo" entry
           (file+headline "~/Documents/Notes/todo.org" "Tasks")
           "* TODO %?\nEntered %U\n  %i\n  %a")
          ("T" "Ticket" entry
           (file+headline "~/Documents/Notes/tickets.org" "Tickets")
           "* TODO %?\nEntered %U\n")
          ("j" "Journal" entry
           (file+datetree "~/Documents/Notes/journal.org")
           "* %?\nEntered %U\n  %i\n  %a")
          ("n" "Note" entry
           (file+datetree "~/Documents/Notes/notebook.org")
           "* %?\nEntered %U\n %i\n %a")
          ;; http://stackoverflow.com/questions/14666625/combine-org-mode-capture-and-drill-modules-to-learn-vocabulary
          ("J" "Japanese" entry
           (file+headline "~/Documents/japanese drill.org" "Vocabulary")
           "* %^{The word} :drill:\n %t\n %^{kana|%\\1} \n** Answer \n%^{The definition}"
           :immediate-finish t))
        org-refile-targets '(("todo.org" :level . 1)))
#+end_src

Store link
#+begin_src emacs-lisp
(define-key global-map "\C-cl" 'org-store-link)
#+end_src
*** Linking
#+BEGIN_SRC emacs-lisp
  (use-package orgit
    :after org)
#+END_SRC
*** Journal
#+begin_src emacs-lisp
(defvar org-journal-file "~/Documents/Notes/journal.org"
  "Path to OrgMode journal file.")

(defvar org-journal-dir "~/Documents/Notes/")

(defvar org-journal-date-format "%Y-%m-%d"
  "Date format string for journal headings.")
#+end_src
*** Speed Keys
#+begin_src emacs-lisp

#+end_src
*** Logging
#+begin_src emacs-lisp
(setq org-log-done t)
#+end_src
*** Export
#+begin_src emacs-lisp
(use-package ox-html5slide)
(use-package org-re-reveal)
#+end_src
**** LateX
#+begin_src emacs-lisp
   (setf TeX-engine 'xetex)


   (setq org-export-latex-todo-keyword-markup
         '((t      . "\\textbf{%s}")
           ("TODO" . "\\textcolor{red}{TODO}")
           ("DONE" . "\\textcolor{green}{DONE}"))
         org-latex-pdf-process (list "latexmk -pdflatex=xelatex -shell-escape -pdf -bibtex %f")
         org-format-latex-header
               "\\documentclass{article}
   \\usepackage[usenames]{color}
   [PACKAGES]
   [DEFAULT-PACKAGES]
   \\include{physics}
   \\pagestyle{empty}             % do not remove
   % The settings below are copied from fullpage.sty
   \\setlength{\\textwidth}{\\paperwidth}
   \\addtolength{\\textwidth}{-3cm}
   \\setlength{\\oddsidemargin}{1.5cm}
   \\addtolength{\\oddsidemargin}{-2.54cm}
   \\setlength{\\evensidemargin}{\\oddsidemargin}
   \\setlength{\\textheight}{\\paperheight}
   \\addtolength{\\textheight}{-\\headheight}
   \\addtolength{\\textheight}{-\\headsep}
   \\addtolength{\\textheight}{-\\footskip}
   \\addtolength{\\textheight}{-3cm}
   \\setlength{\\topmargin}{1.5cm}
   \\addtolength{\\topmargin}{-2.54cm}"
               org-latex-image-default-width ".6\\linewidth")

(dolist (class '(;; Presentation beamer class
		 ("presentation"
		  "\\documentclass{beamer}
		\\usetheme[alternativetitlepage=true]{Torino}
		%\\usecolortheme{{{{beamercolortheme}}}}
		\\usepackage{fontspec}
		\\include{common}
		\\include{physics}"
		  ("\\section{%s}" . "\\section*{%s}")

		  ("\\begin{frame}[fragile]\\frametitle{%s}"
		   "\\end{frame}"
		   "\\begin{frame}[fragile]\\frametitle{%s}"
		   "\\end{frame}"))

		 ;; Revtex class
		 ("revtex"
		  "\\documentclass{revtex4-1}
		\\usepackage{fontspec}
		\\usepackage{graphicx}
		[NO-DEFAULT-PACKAGES]"
		  ("\\section{%s}" . "\\section*{%s}")

		  ("\\subsection{%s}" . "\\subsection*{%s}"))
		 ;; Problem set class
		 ("problemset"
               "\\documentclass{article}[10pt]
                 [NO-DEFAULT-PACKAGES]
                 \\include{common}
		\\include{physics}
		\\renewcommand\\thesubsection{\\textcircled{\\alph{subsection}}}"
               ("\\section{%s}" . "\\section{%s}")
               ("\\subsection{%s}" . "\\subsection{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection{%s}")
               ("\\paragraph{%s}" . "\\paragraph{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph{%s}"))

		 ;; notes
		 ("notes"
               "\\documentclass{article}[10pt]
                [NO-DEFAULT-PACKAGES]
                \\include{common}
		\\include{physics}"
               ("\\section{%s}" . "\\section{%s}")
               ("\\subsection{%s}" . "\\subsection{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection{%s}")
               ("\\paragraph{%s}" . "\\paragraph{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph{%s}"))))
  ;; Add classes to export list
  (add-to-list 'org-latex-classes
	       class))
#+end_src
**** Reveal
#+begin_src emacs-lisp
(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
#+end_src
*** Babel
#+begin_src emacs-lisp
(setq org-src-fontify-natively t)
#+end_src
*** Agenda
#+begin_src emacs-lisp
  (define-key global-map "\C-ca" 'org-agenda)

  (setf org-agenda-files
        (quote ("~/Documents/Notes/journal.org"
                "~/Documents/Notes/todo.org")))
#+end_src
** Web
#+begin_src emacs-lisp
  (use-package prettier-js)
  (use-package web-mode
    :mode (("\\.phtml\\'" . web-mode)
           ("\\.tpl\\.php\\'" . web-mode)
           ("\\.[gj]sp\\'" . web-mode)
           ("\\.as[cp]x\\'" . web-mode)
           ("\\.erb\\'" . web-mode)
           ("\\.mustache\\'" . web-mode)
           ("\\.djhtml\\'" . web-mode)
           ("\\.ejs\\'" . web-mode)
           ("\\.scss\\'" . web-mode)
           ("\\.css\\'" . web-mode)
           ("\\.html?\\'" . web-mode)
           ;; Mithril coat templates
           ("\\.coat\\'" . web-mode))

    :hook ((web-mode . rainbow-mode)
           (web-mode . flyspell-prog-mode))
    :requires rainbow-mode
    :custom
    (web-mode-engines-alist '(("django" . "\\.html")))

    :config
    (flycheck-add-mode 'javascript-eslint 'web-mode)
    (add-hook 'web-mode-hook (lambda ()
                               (when (find web-mode-content-type '("jsx" "javascript") :test 'equal)
                                 ;; (tide-mode +1)
                                 (company-mode +1)
                                 ;; (tide-hl-identifier-mode +1)
                                 (flycheck-mode +1)
                                 (eldoc-mode +1)
                                 ;; (tide-setup)
                                 (smartparens-mode +1))))

    ;; (defadvice web-mode-highlight-part (around tweak-jsx activate)
    ;;   (if (equal web-mode-content-type "jsx")
    ;;       (let ((web-mode-enable-part-face nil))
    ;;         ad-do-it)
    ;;     ad-do-it))
    )
#+end_src
** Javascript
*** Typescript
 #+BEGIN_SRC emacs-lisp
   (use-package tide)
   (use-package typescript-mode
     :mode (("\\.tsx?\\'" . typescript-mode)
            ("\\.jsx?\\'" . typescript-mode))
     :after tide
     :bind (:map typescript-mode-map
                 ;; fixme: stop this from causing it to be associated with typescript
                 ;; ("M-?" . xref-references)
                 )
     :hook ((typescript-mode . prettier-mode)
            (typescript-mode . company-mode)
            (typescript-mode . smartparens-mode)
            (typescript-mode . flycheck-mode)
            (typescript-mode . eldoc-mode)
            (typescript-mode . tide-hl-identifier-mode)
            (typescript-mode . tide-setup)))
 #+END_SRC
** Lisp
#+begin_src emacs-lisp
  ;; (when (file-exists-p (expand-file-name "~/quicklisp/slime-helper.el"))
  ;;   (use-package slime
  ;;   :init
  ;;   (load (expand-file-name "~/quicklisp/slime-helper.el"))
  ;;   (when (file-exists-p (expand-file-name "~/.emacs.d/slime-repl-ansi-color.el"))
  ;;     (load (expand-file-name "~/.emacs.d/slime-repl-ansi-color.el")))

  ;;   :custom
  ;;   (inferior-lisp-program "sbcl --dynamic-space-size 2560")
  ;;   (slime-contribs '(slime-fancy slime-banner slime-repl-ansi-color slime-company))

  ;;   :config
  ;;   (slime-setup slime-contribs)

  ;;   :hook
  ;;   (lisp-mode . paredit-mode)
  ;;   (slime-mode . paredit-mode)))

  (use-package sly
    :custom
    (inferior-lisp-program "sbcl")
    :hook
    ((lisp-mode . paredit-mode)
     (lisp-mode . company-mode)
     (sly-editing-mode . company-mode)
     (sly-editing-mode . paredit-mode)
     (sly-mrepl-mode . company-mode))
    :bind
    (:map sly-mode-map
          ("C-c C-M" . sly-macroexpand-1)
          ("C-c C-p" . sly-mrepl-previous-prompt)
          ("C-c C-n" . sly-mrepl-next-prompt))
    :init
    (push 'sly-repl-ansi-color sly-contribs)
    :config
    (defun fisxoj/sly-xref--show-or-goto-results (xrefs _type symbol package &optional method)
      "If only one result is returned, just go there, don't show the results list buffer."

      (cond
       ((and (= 1 (length xrefs))        ;; 1 group
             (= 1 (length (cdar xrefs))) ;; 1 entry in that group
             )
        (cl-destructuring-bind (label location) (cl-first (cdar xrefs))
          (sly--pop-to-source-location location 'sly-xref)))

       (t
        (sly-xref--show-results xrefs _type symbol package method))))

    (advice-add 'sly-who-calls
                :override
                (lambda (symbol)
                  (interactive (list (sly-read-symbol-name "Who calls: ")))
                  (sly-xref :calls symbol 'fisxoj/sly-xref--show-or-goto-results))))

  (use-package sly-repl-ansi-color
    :after sly)

  (use-package sly-named-readtables
    :after sly)

  (use-package sly-macrostep
    :after sly)

  (use-package sly-quicklisp
    :after sly)

  (use-package docker-tramp
    :custom
    (docker-tramp-docker-executable "podman"))
#+end_src
** Elm
#+BEGIN_SRC emacs-lisp
  (use-package elm-mode
    :config
    (add-hook 'flycheck-mode 'flycheck-elm-setup)
    (add-to-list 'company-backends 'company-elm)
    (add-hook 'elm-mode-hook 'elm-oracle-setup-completion))
#+END_SRC
** Python
   ~pip install python-language-server[all] pyls-mypy pyls-isort~
#+BEGIN_SRC emacs-lisp
  (use-package python-mode
    :ensure nil
    :hook ((python-mode . eglot-ensure)
           (python-mode . smartparens-mode)
           (python-mode . company-mode))
    :bind (:map python-mode-map
                ("C-c C-w C-r" . xref-find-references)))
#+END_SRC
** Coffeescript
#+BEGIN_SRC emacs-lisp
(setq coffee-tab-width 4)
#+END_SRC
** Rust
Based on/copied from http://bassam.co/emacs/2015/08/24/rust-with-emacs/
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :after (eglot)
    :bind (:map rust-mode-map
           ("M-p" . flymake-goto-prev-error)
           ("M-n" . flymake-goto-next-error))
    :hook ((rust-mode . eglot-ensure)
           (rust-mode . smartparens-mode)
           (rust-mode . company-mode))
    :init
    (setf (cdr (assoc 'rust-mode eglot-server-programs)) (list "rust-analyzer")))
#+END_SRC
** Octave
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.m$" . octave-mode))
#+end_src
** LaTeX
#+begin_src emacs-lisp
(setq TeX-auto-save t
      TeX-parse-self t
      TeX-save-query nil
      TeX-PDF-mode t)

(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-buffer)
#+end_src
** Ruby
#+begin_src emacs-lisp
  (use-package ruby-electric)
  (use-package rbenv
    :custom
    (rbenv-modeline-function '(lambda (current-ruby)
                                (when (member major-mode '(enh-ruby-mode ruby-mode))
                                  (list "["
                                        (propertize "💎" 'face 'rbenv-active-ruby-face)
                                        current-ruby
                                        "]"))))
    :init
    (global-rbenv-mode))
  (use-package inf-ruby)
  (use-package enh-ruby-mode
    :interpreter "ruby"
    :hook ((enh-ruby-mode . ruby-electric-mode)
           (enh-ruby-mode . eglot-ensure)
           (enh-ruby-mode . company-mode)
           (enh-ruby-mode . yas-minor-mode)
           (enh-ruby-mode . rbenv-use-corresponding)
           (enh-ruby-mode . inf-ruby-minor-mode)
           (enh-ruby-mode . smartparens-mode))
    :mode (("\\.rb$" . enh-ruby-mode)
           ("\\.rake$" . enh-ruby-mode)
           ("Rakefile$" . enh-ruby-mode)
           ("\\.gemspec$" . enh-ruby-mode)
           ("\\.ru$" . enh-ruby-mode)
           ("Gemfile$" . enh-ruby-mode)
           ("\\.json.jbuilder$" . enh-ruby-mode))
    :bind
    ("C-c i b" . fisxoj/insert-or-kill-binding-pry)
    :config
    (setenv "PAGER" (executable-find "cat"))
    (inf-ruby-switch-setup)
    (add-to-list 'eglot-server-programs '(enh-ruby-mode "solargraph" "socket" "--port" :autoport))
    (defun fisxoj/insert-or-kill-binding-pry ()
      (interactive)
      (save-excursion
        (if (string= (s-trim
                      (buffer-substring-no-properties (line-beginning-position) (line-end-position)))
                     "binding.pry")
            (progn (beginning-of-line)
                   (kill-line)
                   (kill-line))
          (progn
            (beginning-of-line)
            (insert "binding.pry")
            (indent-according-to-mode)
            (insert "\n"))))
      (save-buffer)))
#+end_src
** Clojure
#+begin_src emacs-lisp
  ;; (use-package cider
  ;;   :requires paredit
  ;;   :hook ((clojure-mode . paredit-mode)
  ;;          (clojure-mode . turn-on-eldoc-mode))
  ;;   :custom
  ;;   (nrepl-hide-special-buffers t)
  ;;   (cider-repl-pop-to-buffer-on-connect nil)
  ;;   (cider-show-error-buffer nil)
  ;;   (cider-repl-popup-stacktraces t)
  ;;   (cider-lein-command "lein"))
#+end_src
** Go
#+BEGIN_SRC emacs-lisp
  (use-package gotest)
  (use-package string-inflection)

  (use-package go-mode
    :after gotest
    :commands yas-minor-mode
    :bind (:map go-mode-map
                ("M-?" . xref-find-references)
                ("C-c i j" . fisxoj/go-mode/insert-json-lower-camel-struct-tag)
                ("C-c i J" . fisxoj/go-mode/insert-json-underscore-struct-tag)
                ("C-c , s" . go-test-current-test)
                ("C-c , v" . go-test-current-file)
                ("C-c , a" . go-test-current-project))
    :hook ((go-mode . eglot-ensure)
           (go-mode . smartparens-mode)
           (go-mode . company-mode)
           (go-mode . yas-minor-mode))
    :config
    (put 'go-command 'safe-local-variable 'stringp)
    (let ((gopath (expand-file-name "~/Code/go"))
          (gobin (expand-file-name "~/Code/go/bin")))
      (setenv "GOPATH" gopath)
      (setenv "GOBIN" gobin)
      (add-to-list 'exec-path gobin)
      (add-hook 'before-save-hook
                (lambda ()
                  (when (eq major-mode 'go-mode)
                    (gofmt-before-save)))))
    (defun fisxoj/go-mode/insert-json-lower-camel-struct-tag ()
      (interactive)
      (save-excursion
        (beginning-of-line-text)
        (set-mark (point))
        (forward-sexp)
        (let ((field-name (buffer-substring-no-properties (mark) (point))))
          (end-of-line)
          (insert (format " `json:\"%s\"`" (string-inflection-lower-camelcase-function field-name))))))

    (defun fisxoj/go-mode/insert-json-underscore-struct-tag ()
      (interactive)
      (save-excursion
        (beginning-of-line-text)
        (set-mark (point))
        (forward-sexp)
        (let ((field-name (buffer-substring-no-properties (mark) (point))))
          (end-of-line)
          (insert (format " `json:\"%s\"`" (string-inflection-underscore-function field-name)))))))
#+END_SRC

Here's some things to install to make all of these bits work

#+BEGIN_EXAMPLE
go get -u github.com/nsf/gocode
go get -v github.com/rogpeppe/godef
go get -u github.com/dougm/goflymake
go get golang.org/x/tools/cmd/oracle
#+END_EXAMPLE
** WGrep
#+BEGIN_SRC emacs-lisp
(setq wgrep-auto-save-buffer t)
#+END_SRC

** Eldoc
#+BEGIN_SRC emacs-lisp
  (setf eldoc-idle-delay 0.2
        eldoc-echo-area-use-multiline-p t)
#+END_SRC
** Emacs Lisp
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'emacs-lisp-mode-hook 'company-mode)
  (add-hook 'emacs-lisp-mode-hook 'flyspell-prog-mode)
  (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
#+END_SRC
** Terraform
   #+BEGIN_SRC emacs-lisp
     (use-package terraform-mode
       :hook ((terraform-mode . company-mode)
	      (terraform-mode . smartparens-mode)))

     (use-package company-terraform
       :init (company-terraform-init))
   #+END_SRC
** Dockerfile
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode)
#+END_SRC
** Markdown
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode)
   #+END_SRC
** Scala
   Setup language server for scala.
   #+BEGIN_SRC emacs-lisp
     (use-package scala-mode
       :hook ((scala-mode . smartparens-mode)
              (scala-mode . eglot-ensure))
       :config
       (add-to-list 'eglot-server-programs '(scala-mode . ("metals-emacs"))))

     (use-package sbt-mode
       :ensure t
       :commands sbt-start sbt-command)
   #+END_SRC
** HTTP
#+begin_src emacs-lisp
  (use-package restclient)
#+end_src
* Special Commands
** Flip window split
#+BEGIN_SRC emacs-lisp
  (defun fisxoj/toggle-window-split ()
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
               (next-win-buffer (window-buffer (next-window)))
               (this-win-edges (window-edges (selected-window)))
               (next-win-edges (window-edges (next-window)))
               (this-win-2nd (not (and (<= (car this-win-edges)
                                           (car next-win-edges))
                                       (<= (cadr this-win-edges)
                                           (cadr next-win-edges)))))
               (splitter
                (if (= (car this-win-edges)
                       (car (window-edges (next-window))))
                    'split-window-horizontally
                  'split-window-vertically)))
          (delete-other-windows)
          (let ((first-win (selected-window)))
            (funcall splitter)
            (if this-win-2nd (other-window 1))
            (set-window-buffer (selected-window) this-win-buffer)
            (set-window-buffer (next-window) next-win-buffer)
            (select-window first-win)
            (if this-win-2nd (other-window 1))))))
#+END_SRC

** Gibberish Generator
#+begin_src emacs-lisp
  (defun insert-gallia ()
    (interactive)
    (insert "Gallia est omnis divisa in partes tres, quarum unam incolunt Belgae, aliam Aquitani, tertiam qui ipsorum lingua Celtae, nostra Galli appellantur.  Hi omnes lingua, institutis, legibus inter se differunt. Gallos ab Aquitanis Garumna flumen, a Belgis Matrona et Sequana dividit.  Horum omnium fortissimi sunt Belgae, propterea quod a cultu atque humanitate provinciae longissime absunt, minimeque ad eos mercatores saepe commeant atque ea quae ad effeminandos animos pertinent important, proximique sunt Germanis, qui trans Rhenum incolunt, quibuscum continenter bellum gerunt. Qua de causa Helvetii quoque reliquos Gallos virtute praecedunt, quod fere cotidianis proeliis cum Germanis contendunt, cum aut suis finibus eos prohibent aut ipsi in eorum finibus bellum gerunt. Eorum una, pars, quam Gallos obtinere dictum est, initium capit a flumine Rhodano, continetur Garumna flumine, Oceano, finibus Belgarum, attingit etiam ab Sequanis et Helvetiis flumen Rhenum, vergit ad septentriones.  Belgae ab extremis Galliae finibus oriuntur, pertinent ad inferiorem partem fluminis Rheni, spectant in septentrionem et orientem solem.  Aquitania a Garumna flumine ad Pyrenaeos montes et eam partem Oceani quae est ad Hispaniam pertinet; spectat inter occasum solis et septentriones."))

  (defun insert-check ()
    "Insert a unicode check mark"
    (interactive)
    (insert "✓"))

  (defun insert-cross ()
    "Insert a unicode cross mark"
    (interactive)
    (insert "✗"))

  (global-set-key (kbd "C-c i g") 'insert-gallia)
  (global-set-key (kbd "C-c i c") 'insert-check)
  (global-set-key (kbd "C-c i x") 'insert-cross)
#+end_src

** Markdown to org
#+BEGIN_SRC emacs-lisp
  (use-package pandoc
    :config
    (defun fisxoj/region-md-to-org (start end)
      (interactive "r")
      (let ((org-content (pandoc-convert-stdio (buffer-substring start end)
                                               "gfm" "org")))
        (delete-region start end)
        (insert org-content))))
#+END_SRC

** Dealing with different monitor pixel densities
#+BEGIN_SRC emacs-lisp
(defun fisxoj/home-mode ()
  (interactive)
  (set-frame-font "Inconsolata-8"))

(defun fisxoj/work-mode ()
  (interactive)
  (set-frame-font "Inconsolata-6"))
#+END_SRC

** Save without running hooks
#+BEGIN_SRC emacs-lisp
(defun fisxoj/save-without-hooks ()
  "Save without running any before-save-hooks"
  (interactive)
  (let ((before-save-hook nil))
    (save-buffer)))
#+END_SRC

** Revisit as root
#+BEGIN_SRC emacs-lisp
(defun fisxoj/revisit-as-root ()
  (interactive)
  (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name)))
#+END_SRC

** URL en/decoding
   http://www.blogbyben.com/2010/08/handy-emacs-function-url-decode-region.html
#+begin_src emacs-lisp
  (defun url-decode-region (start end)
    "Replace a region with the same contents, only URL decoded."
    (interactive "r")
    (let ((text (url-unhex-string (buffer-substring start end))))
      (delete-region start end)
      (insert text)))

  (defun url-encode-region (start end)
    (interactive "r")
    (let ((text (url-hexify-string (buffer-substring start end))))
      (delete-region start end)
      (insert text)))
#+end_src

Extract target url from a google calendar link (and probably other obfuscated google links)

#+begin_src emacs-lisp
  (defun extract-google-url (start end)
    (interactive "r")
    (let* ((url (buffer-substring start end))
           (decoded (cadr (assoc-string "q" (url-parse-query-string (cdr (url-path-and-query (url-generic-parse-url url))))))))
      (delete-region start end)
      (insert decoded)))
#+end_src
